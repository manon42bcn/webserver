/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   HttpCGIHandler.hpp                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mporras- <manon42bcn@yahoo.com>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/06 10:39:21 by mporras-          #+#    #+#             */
/*   Updated: 2024/11/06 20:39:04 by mporras-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef _HTTP_CGI_HANDLER_HPP_
#define _HTTP_CGI_HANDLER_HPP_

#include "WebServerResponseHandler.hpp"
#define CGI_NAME "HttpCGIHandler"

/**
 * @brief Handles HTTP requests that require CGI processing, extending response handling.
 *
 * The `HttpCGIHandler` class is responsible for executing CGI scripts and handling
 * the responses generated by these scripts. It inherits from `WsResponseHandler`,
 * which provides basic HTTP response capabilities, and adds specific functionality
 * for interacting with CGI scripts through environment variables, pipes, and
 * the `execve` system call.
 *
 * @details
 * This class:
 * - Sets up the environment for CGI execution according to the CGI specification.
 * - Manages inter-process communication with the CGI process using pipes.
 * - Parses the output from the CGI process to separate headers from body content.
 * - Provides a method to free dynamically allocated environment variables.
 * - Uses `send_response` to format and send the final response to the client.
 *
 * Typical usage involves creating an instance of `HttpCGIHandler` and invoking
 * `handle_request`, which manages the full lifecycle of a CGI request.
 *
 */
class HttpCGIHandler : public WsResponseHandler {
	private:
		std::vector<char*>          _cgi_env;

		bool cgi_execute();
		void get_file_content(int pid, int (&fd)[2]);
		std::vector<char*> cgi_environment();
		void free_cgi_env();
		bool send_response(const std::string &body, const std::string &path);
	public:
		HttpCGIHandler(const LocationConfig *location,
							const Logger *log,
							ClientData* client_data,
							s_request& request,
							int fd);
		~HttpCGIHandler();
		bool handle_request();

};

#endif
