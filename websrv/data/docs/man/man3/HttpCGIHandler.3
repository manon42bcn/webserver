.TH "HttpCGIHandler" 3 "WebServer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
HttpCGIHandler \- Handles HTTP requests that require CGI script execution\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <HttpCGIHandler\&.hpp>\fP
.PP
Inherits \fBWsResponseHandler\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHttpCGIHandler\fP (const \fBLocationConfig\fP *location, const \fBLogger\fP *log, \fBClientData\fP *client_data, \fBs_request\fP &request, int fd)"
.br
.RI "Constructs an \fR\fBHttpCGIHandler\fP\fP for processing CGI requests\&. "
.ti -1c
.RI "\fB~HttpCGIHandler\fP ()"
.br
.RI "Destructor for \fR\fBHttpCGIHandler\fP\fP, responsible for cleaning up resources\&. "
.ti -1c
.RI "bool \fBhandle_request\fP ()"
.br
.RI "Handles the CGI request by executing the CGI script and sending the response\&. "
.in -1c

Public Member Functions inherited from \fBWsResponseHandler\fP
.in +1c
.ti -1c
.RI "\fBWsResponseHandler\fP (const \fBLocationConfig\fP *location, const \fBLogger\fP *log, \fBClientData\fP *client_data, \fBs_request\fP &request, int fd)"
.br
.RI "Constructs a \fR\fBWsResponseHandler\fP\fP to manage web server responses\&. "
.ti -1c
.RI "virtual \fB~WsResponseHandler\fP ()"
.br
.RI "Destructor for the \fR\fBWsResponseHandler\fP\fP class\&. "
.ti -1c
.RI "bool \fBsend_error_response\fP ()"
.br
.RI "Sends an HTTP error response to the client, using a custom error page if available\&. "
.ti -1c
.RI "bool \fBredirection\fP ()"
.br
.RI "Handles HTTP redirection for the current request\&. "
.in -1c
.SS "Additional Inherited Members"


Protected Member Functions inherited from \fBWsResponseHandler\fP
.in +1c
.ti -1c
.RI "virtual bool \fBhandle_get\fP ()"
.br
.RI "Handles HTTP GET requests, validating access, resource data, and sending a response\&. "
.ti -1c
.RI "virtual bool \fBhandle_post\fP ()"
.br
.RI "Handles HTTP POST requests, validating access, saving data, and sending a response\&. "
.ti -1c
.RI "bool \fBhandle_delete\fP ()"
.br
.RI "Handles HTTP DELETE requests by checking permissions and deleting the specified resource\&. "
.ti -1c
.RI "virtual bool \fBvalidate_payload\fP ()"
.br
.RI "Validates the payload of an HTTP request to ensure it meets requirements\&. "
.ti -1c
.RI "virtual void \fBget_file_content\fP (std::string &path)"
.br
.RI "Retrieves the content of a file specified by the path\&. "
.ti -1c
.RI "bool \fBsave_file\fP (const std::string &save_path, const std::string &content)"
.br
.RI "Saves the provided content to a specified file path\&. "
.ti -1c
.RI "virtual std::string \fBheader\fP (int code, size_t content_size, std::string mime)"
.br
.RI "Constructs an HTTP response header based on provided parameters\&. "
.ti -1c
.RI "bool \fBsender\fP (const std::string &body)"
.br
.RI "Sends the HTTP response to the client through the socket file descriptor\&. "
.ti -1c
.RI "std::string \fBdefault_plain_error\fP ()"
.br
.RI "Generates a default HTML error page for the HTTP response\&. "
.ti -1c
.RI "void \fBturn_off_sanity\fP (\fBe_http_sts\fP status, std::string detail)"
.br
.RI "Disables further request processing by marking the request as invalid\&. "
.in -1c

Protected Attributes inherited from \fBWsResponseHandler\fP
.in +1c
.ti -1c
.RI "const \fBLocationConfig\fP * \fB_location\fP"
.br
.ti -1c
.RI "const \fBLogger\fP * \fB_log\fP"
.br
.ti -1c
.RI "\fBClientData\fP * \fB_client_data\fP"
.br
.ti -1c
.RI "\fBs_request\fP & \fB_request\fP"
.br
.ti -1c
.RI "\fBs_content\fP \fB_response_data\fP"
.br
.ti -1c
.RI "std::string \fB_headers\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Handles HTTP requests that require CGI script execution\&. 

The \fR\fBHttpCGIHandler\fP\fP class is responsible for executing CGI scripts in response to HTTP requests, capturing their output, and sending the appropriate HTTP responses back to the client\&. It manages environment setup, process execution, inter-process communication via pipes, and error handling throughout the CGI execution lifecycle\&.

.PP
.IP "\(bu" 2
\fBCGI Execution\fP: Executes external scripts or programs as per the CGI specification\&.
.IP "\(bu" 2
\fBEnvironment Management\fP: Sets up and cleans up environment variables required by the CGI script\&.
.IP "\(bu" 2
\fBProcess Handling\fP: Manages child processes, including fork and exec operations\&.
.IP "\(bu" 2
\fBResponse Parsing\fP: Parses the output from the CGI script to construct valid HTTP responses\&.
.IP "\(bu" 2
\fBError Handling\fP: Provides robust error detection and handling mechanisms to ensure server stability\&.
.PP
.SS "Public Methods"
.IP "\(bu" 2
\fR\fBHttpCGIHandler(\&.\&.\&.)\fP\fP: Constructor that initializes the handler with necessary configurations\&.
.IP "\(bu" 2
\fR\fB~HttpCGIHandler()\fP\fP: Destructor that cleans up resources\&.
.IP "\(bu" 2
\fRbool \fBhandle_request()\fP\fP: Main method to process the CGI request\&.
.PP
.SS "Private Methods"
.IP "\(bu" 2
\fRbool cgi_execute()\fP: Executes the CGI script and manages pipes and processes\&.
.IP "\(bu" 2
\fRvoid get_file_content(int pid, int (&fd)[2])\fP: Reads the CGI output from the pipe\&.
.IP "\(bu" 2
\fRstd::vector<char*> cgi_environment()\fP: Sets up the CGI environment variables\&.
.IP "\(bu" 2
\fRvoid free_cgi_env()\fP: Frees the allocated environment variables\&.
.IP "\(bu" 2
\fRbool send_response(const std::string &body, const std::string &path)\fP: Sends the response to the client\&.
.PP

.PP
\fBNote\fP
.RS 4
This class is implemented as part of WebServer Project\&. Some errors controls are part of previous process\&. 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "HttpCGIHandler::HttpCGIHandler (const \fBLocationConfig\fP * location, const \fBLogger\fP * log, \fBClientData\fP * client_data, \fBs_request\fP & request, int fd)"

.PP
Constructs an \fR\fBHttpCGIHandler\fP\fP for processing CGI requests\&. Initializes the CGI handler with the given location configuration, logger, client data, request details, and file descriptor\&. It logs the initialization process and ensures that critical pointers are valid\&.

.PP
\fBParameters\fP
.RS 4
\fIlocation\fP Pointer to the \fR\fBLocationConfig\fP\fP containing server configuration\&. 
.br
\fIlog\fP Pointer to the \fR\fBLogger\fP\fP instance for logging activities\&. 
.br
\fIclient_data\fP Pointer to \fR\fBClientData\fP\fP containing client connection details\&. 
.br
\fIrequest\fP Reference to the \fR\fBs_request\fP\fP structure with the request information\&. 
.br
\fIfd\fP File descriptor associated with the client connection\&. 
.RE
.PP

.SS "HttpCGIHandler::~HttpCGIHandler ()"

.PP
Destructor for \fR\fBHttpCGIHandler\fP\fP, responsible for cleaning up resources\&. This destructor frees the allocated CGI environment variables and logs the cleanup process\&. It ensures that no exceptions escape the destructor to maintain exception safety\&. 
.SH "Member Function Documentation"
.PP 
.SS "bool HttpCGIHandler::handle_request ()\fR [virtual]\fP"

.PP
Handles the CGI request by executing the CGI script and sending the response\&. This method executes the CGI script, processes its output, and constructs an HTTP response to be sent back to the client\&. It performs validation on the CGI output, ensuring that necessary headers like \fRContent-Type\fP are present\&.

.PP
\fBReturns\fP
.RS 4
\fRtrue\fP if the response is successfully sent; \fRfalse\fP if an error occurs\&.
.RE
.PP
.IP "\(bu" 2
\fBCGI Execution\fP: Calls \fRcgi_execute()\fP to run the CGI script\&.
.IP "\(bu" 2
\fBResponse Validation\fP: Checks if the CGI script produced any output\&.
.IP "\(bu" 2
\fBHeader Parsing\fP: Extracts headers and status code from the CGI response\&.
.IP "\(bu" 2
\fBError Handling\fP: Sends appropriate error responses if validation fails\&. 
.PP

.PP
Reimplemented from \fBWsResponseHandler\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for WebServer from the source code\&.
