.TH "HttpRequestHandler" 3 "WebServer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
HttpRequestHandler \- Handles HTTP requests by parsing, validating, and dispatching them to appropriate response handlers\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <HttpRequestHandler\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHttpRequestHandler\fP (const \fBLogger\fP *log, \fBClientData\fP *client_data)"
.br
.RI "Constructs an \fBHttpRequestHandler\fP instance to process and manage HTTP requests\&. "
.ti -1c
.RI "\fB~HttpRequestHandler\fP ()"
.br
.RI "Destructor for \fBHttpRequestHandler\fP\&. "
.ti -1c
.RI "void \fBrequest_workflow\fP ()"
.br
.RI "Executes the workflow for processing and validating an HTTP request\&. "
.ti -1c
.RI "void \fBhandle_request\fP ()"
.br
.RI "Processes the HTTP request and initiates the appropriate response handler\&. "
.in -1c
.SH "Detailed Description"
.PP 
Handles HTTP requests by parsing, validating, and dispatching them to appropriate response handlers\&. 

The \fR\fBHttpRequestHandler\fP\fP class is responsible for managing the complete lifecycle of an HTTP request, including:
.IP "\(bu" 2
Parsing request headers, method, path, and any additional data such as query parameters and multipart boundaries\&.
.IP "\(bu" 2
Validating the request's structure and content\&.
.IP "\(bu" 2
Determining the appropriate handler based on request type (e\&.g\&., standard, CGI, ranged, or multipart)\&.
.IP "\(bu" 2
Generating an error response if the request is invalid or malformed\&.
.PP
.PP
The class utilizes a series of private validation and parsing steps, executed in sequence through \fRrequest_workflow\fP\&. If any step detects an invalid state, it halts the process and sends an error response\&.
.SS "Attributes"
.IP "\(bu" 2
\fR_config\fP: Reference to the server configuration\&.
.IP "\(bu" 2
\fR_log\fP: Pointer to the logging utility for logging events and errors\&.
.IP "\(bu" 2
\fR_client_data\fP: Manages client-specific information, including connection state and timing\&.
.IP "\(bu" 2
\fR_cache\fP: Pointer to the server cache to leverage cached responses\&.
.IP "\(bu" 2
\fR_location\fP: Configuration for the specific URL location being requested\&.
.IP "\(bu" 2
\fR_fd\fP: File descriptor associated with the client request\&.
.IP "\(bu" 2
\fR_max_request\fP: Maximum allowed size for request data\&.
.IP "\(bu" 2
\fR_request\fP: Raw request data\&.
.IP "\(bu" 2
\fR_factory\fP: Determines the handler type (standard, CGI, range, etc\&.)\&.
.IP "\(bu" 2
\fR_request_data\fP: Stores parsed request details, including headers, method, path, and body\&.
.PP
.PP
The class supports CGI requests, ranged requests, multipart uploads, and standard HTTP methods, using helper classes (\fR\fBHttpResponseHandler\fP\fP, \fR\fBHttpCGIHandler\fP\fP, \fR\fBHttpRangeHandler\fP\fP, and \fR\fBHttpMultipartHandler\fP\fP) to handle each type\&.
.PP
\fBExceptions\fP
.RS 4
\fI\fBWebServerException\fP\fP Thrown for issues with cache, logging, or invalid configurations\&. 
.RE
.PP
\fBSee also\fP
.RS 4
\fBHttpResponseHandler\fP, \fBHttpCGIHandler\fP, \fBHttpRangeHandler\fP, \fBHttpMultipartHandler\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "HttpRequestHandler::HttpRequestHandler (const \fBLogger\fP * log, \fBClientData\fP * client_data)"

.PP
Constructs an \fBHttpRequestHandler\fP instance to process and manage HTTP requests\&. This constructor initializes the handler with essential pointers and settings for processing HTTP requests\&. It retrieves configuration details from the associated client data, initializes logging and caching resources, and verifies the validity of the essential components\&.
.PP
\fBParameters\fP
.RS 4
\fIlog\fP Pointer to a \fBLogger\fP instance for logging request handling activities\&. 
.br
\fIclient_data\fP Pointer to \fBClientData\fP associated with the current client connection\&. 
.br
\fIcache\fP Pointer to a \fBWebServerCache\fP instance to manage cached HTTP responses\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fI\fBLogger::NoLoggerPointer\fP\fP if the provided logger pointer is null\&. 
.br
\fI\fBWebServerException\fP\fP if any of the provided pointers (client_data or cache) are null\&.
.RE
.PP
\fBWarning\fP
.RS 4
Throws exceptions if essential components (logger, client_data, or cache) are not available, which compromises server functionality\&. 
.RE
.PP

.SS "HttpRequestHandler::~HttpRequestHandler ()"

.PP
Destructor for \fBHttpRequestHandler\fP\&. 
.PP
\fBNote\fP
.RS 4
This destructor does not perform specific memory deallocation as most resources are managed externally, but it indicates a cleanup phase in logs\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void HttpRequestHandler::handle_request ()"

.PP
Processes the HTTP request and initiates the appropriate response handler\&. Based on the request's state and attributes, this function initializes and dispatches a suitable response handler:
.IP "\(bu" 2
\fR\fBHttpResponseHandler\fP\fP: Handles standard HTTP requests\&.
.IP "\(bu" 2
\fR\fBHttpCGIHandler\fP\fP: Handles CGI requests\&.
.IP "\(bu" 2
\fR\fBHttpRangeHandler\fP\fP: Manages ranged requests\&.
.IP "\(bu" 2
\fR\fBHttpMultipartHandler\fP\fP: Handles multipart data uploads\&.
.PP
.PP
Workflow:
.IP "1." 4
\fBSanity Check\fP: If \fR_request_data\&.sanity\fP is false, a generic error response is sent via \fR\fBHttpResponseHandler\fP\fP\&.
.IP "2." 4
\fBRequest Type Decision\fP:
.IP "  \(bu" 4
If \fR_request_data\&.factory\fP is 0, uses \fR\fBHttpResponseHandler\fP\fP\&.
.IP "  \(bu" 4
If \fR_request_data\&.cgi\fP is true, uses \fR\fBHttpCGIHandler\fP\fP\&.
.IP "  \(bu" 4
If \fR_request_data\&.range\fP is non-empty, uses \fR\fBHttpRangeHandler\fP\fP\&.
.IP "  \(bu" 4
If \fR_request_data\&.boundary\fP is non-empty, uses \fR\fBHttpMultipartHandler\fP\fP\&. 
.PP
\fBNote\fP
.RS 4
: This method will cache request related info if it was not cached yet, if everything went ok, and if method is get\&.
.RE
.PP
\fBException Handling\fP:
.PP

.PP
.IP "\(bu" 2
Catches \fR\fBWebServerException\fP\fP, \fR\fBLogger::NoLoggerPointer\fP\fP, and \fRstd::exception\fP to log errors and deactivate the client connection\&.
.PP
.PP
\fBExceptions\fP
.RS 4
\fI\fBWebServerException\fP\fP Catches errors from WebServer-specific issues\&. 
.br
\fI\fBLogger::NoLoggerPointer\fP\fP Catches logging pointer errors\&. 
.br
\fIstd::exception\fP Catches unexpected exceptions\&. 
.RE
.PP

.SS "void HttpRequestHandler::request_workflow ()"

.PP
Executes the workflow for processing and validating an HTTP request\&. This method manages the step-by-step workflow for parsing and validating an HTTP request, followed by handling the request if it is ready\&. The workflow is divided into distinct validation steps, each responsible for a specific part of the HTTP request processing\&.
.PP
The method operates as follows:
.IP "1." 4
\fBDefine Steps\fP:
.IP "  \(bu" 4
An array of function pointers (\fRvalidate_step\fP) defines the steps for processing:
.IP "    \(bu" 6
\fRread_request_header\fP: Reads the HTTP request header from the client\&.
.IP "    \(bu" 6
\fRparse_header\fP: Parses the header for key-value pairs\&.
.IP "    \(bu" 6
\fRparse_method_and_path\fP: Extracts the HTTP method and requested path\&.
.IP "    \(bu" 6
\fRparse_path_type\fP: Determines the type of resource (e\&.g\&., file, directory)\&.
.IP "    \(bu" 6
\fRload_header_data\fP: Loads additional header data needed for processing\&.
.IP "    \(bu" 6
\fRload_host_config\fP: Maps the request to the correct host configuration\&.
.IP "    \(bu" 6
\fRsolver_resource\fP: Resolves the resource requested by the client\&.
.IP "    \(bu" 6
\fRload_content\fP: Reads the content of the request, if any\&.
.IP "    \(bu" 6
\fRvalidate_request\fP: Performs final validation of the request's integrity\&.
.PP

.PP

.IP "2." 4
\fBCheck Input State\fP:
.IP "  \(bu" 4
If the request is not ready and the socket is readable (\fRPOLLIN\fP), the validation process begins\&.
.PP

.IP "3." 4
\fBExecute Validation Steps\fP:
.IP "  \(bu" 4
Iterates through the validation steps sequentially:
.IP "    \(bu" 6
Calls each step using a member function pointer\&.
.IP "    \(bu" 6
Stops the process if the \fRsanity\fP flag indicates a validation failure\&.
.PP

.PP

.IP "4." 4
\fBMark Request as Ready\fP:
.IP "  \(bu" 4
If all steps succeed, the request is marked as ready for further handling\&.
.PP

.IP "5." 4
\fBHandle Ready Requests\fP:
.IP "  \(bu" 4
If the request is ready and the socket is writable (\fRPOLLOUT\fP), the request is processed\&.
.PP

.PP
.PP
\fBExceptions\fP
.RS 4
\fIExceptions\fP may occur within individual steps if errors are encountered, such as malformed headers or resource resolution failures\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for WebServer from the source code\&.
